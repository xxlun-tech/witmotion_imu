/**
 * @file hwt905_node.cpp
 * @author ponomarevda96@gmail.com
 * @author xxlshi
 */

#include <hwt905_driver.hpp>
#include <rclcpp/rclcpp.hpp>
#include <serial_driver.hpp>

#include <sensor_msgs/msg/imu.hpp>

class Hwt905RosDriver : public rclcpp::Node
{
public:
  Hwt905RosDriver(Hwt905Driver & hwt905_driver);

  void publish();

  void process_parsed_result(const Hwt905_DataType_t & data_type);

private:
  Hwt905Driver & _hwt905_driver;

  rclcpp::Publisher<sensor_msgs::msg::Imu>::SharedPtr _imu_pub;

  sensor_msgs::msg::Imu _imu_msg;

  Hwt905_Time_t _time;

  Hwt905_Acceleration_t _accel;

  Hwt905_AngularVelocity_t _ang_vel;

  Hwt905_Angle_t _angle;

  Hwt905_Magnetic_t _mag;

  Hwt905_Quaternion_t _quaternion;
};

Hwt905RosDriver::Hwt905RosDriver(Hwt905Driver & hwt905_driver)
: Node("hwt905_node"), _hwt905_driver(hwt905_driver)
{
  /*
  this->declare_parameter<std::string>("serial_port", "/dev/ttyUSB0");
  this->declare_parameter<int>("baud_rate", 460800);
  this->declare_parameter<std::string>("frame_id", "imu_link");
  this->declare_parameter<std::string>("imu_topic", "/imu");

  this->get_parameter("serial_port", serial_port);
  this->get_parameter("baud_rate", baud_rate);
  this->get_parameter("frame_id", frame_id);
  this->get_parameter("imu_topic", imu_topic);
  */

  _imu_pub = this->create_publisher<sensor_msgs::msg::Imu>("/imu/data", 10);

  _imu_msg.header.stamp = this->now();
  _imu_msg.header.frame_id = "imu_link";

  // Initial quaternion setup
  _quaternion.q_0 = 1.0;
  _quaternion.q_1 = 0.0;
  _quaternion.q_2 = 0.0;
  _quaternion.q_3 = 0.0;
}

void Hwt905RosDriver::publish()
{
  _imu_msg.header.stamp = this->now();
  _imu_msg.header.frame_id = "imu_link";

  _imu_msg.orientation.x = _quaternion.q_1;
  _imu_msg.orientation.y = _quaternion.q_2;
  _imu_msg.orientation.z = _quaternion.q_3;
  _imu_msg.orientation.w = _quaternion.q_0;

  _imu_msg.angular_velocity.x = _ang_vel.wx * 3.14 / 180;
  _imu_msg.angular_velocity.y = _ang_vel.wy * 3.14 / 180;
  _imu_msg.angular_velocity.z = _ang_vel.wz * 3.14 / 180;

  _imu_msg.linear_acceleration.x = _accel.ax;
  _imu_msg.linear_acceleration.y = _accel.ay;
  _imu_msg.linear_acceleration.z = _accel.az;

  _imu_pub->publish(_imu_msg);
}

void Hwt905RosDriver::process_parsed_result(const Hwt905_DataType_t & data_type)
{
  switch (data_type) {
    case DATA_TYPE_NONE:
      ///< Although here we do nothing, typically it is the most common case. Keep it first.
      break;
    case DATA_TYPE_TIME:
      _hwt905_driver.get_time(&_time);
      break;
    case DATA_TYPE_ACCEL:
      _hwt905_driver.get_acceleration(&_accel);
      break;
    case DATA_TYPE_ANG_VEL:
      _hwt905_driver.get_angular_velocity(&_ang_vel);
      break;
    case DATA_TYPE_ANGLE:
      _hwt905_driver.get_angle(&_angle);
      break;
    case DATA_TYPE_MAG:
      _hwt905_driver.get_magnetic_field(&_mag);
      break;
    case DATA_TYPE_QUATERNION:
      _hwt905_driver.get_quaternion(&_quaternion);
      break;
    default:
      break;
  }
}

int main(int argc, char ** argv)
{
  rclcpp::init(argc, argv);

  Hwt905Driver hwt905_driver;
  SerialDriver serial_driver;

  std::string serial_port = "/dev/ttyUSB0";
  int32_t baudrate = 115200;
  serial_driver.init(serial_port, baudrate);

  Hwt905RosDriver ros_driver(hwt905_driver);

  constexpr const size_t MAX_SERIAL_BUFFER_RECV_SIZE = 256;
  uint8_t serial_recv_buf[MAX_SERIAL_BUFFER_RECV_SIZE];

  int32_t num_of_recv_bytes;
  rclcpp::Rate loop_rate(200);

  while (rclcpp::ok()) {
    rclcpp::spin_some(ros_driver.get_node_base_interface());
    loop_rate.sleep();
    ros_driver.publish();

    num_of_recv_bytes = serial_driver.spin(serial_recv_buf, MAX_SERIAL_BUFFER_RECV_SIZE);
    if (num_of_recv_bytes < 0) {
      continue;  // handle error
    }

    for (int32_t byte_idx = 0; byte_idx < num_of_recv_bytes; byte_idx++) {
      auto data_type = hwt905_driver.process_next_byte(serial_recv_buf[byte_idx]);
      ros_driver.process_parsed_result(data_type);
    }
  }

  rclcpp::shutdown();
  return 0;
}
